# Classes
module DSLCompose
  class Parser
    class ForChildrenOfParser
      class ForDSLParser
        @base_class: Object
        @child_class: Object
        @dsl_names: Array[Symbol]
        @dsl_execution: Interpreter::Execution

        def initialize: (Object base_class, Object child_class, Array[Symbol] dsl_names) -> void

        # overriding this method because steep doesn't
        # correctly infer that a block is being passed to this method
        def instance_exec: (
          ::Hash[untyped, untyped] args
        ) -> void

        private
        def for_method: (Array[Symbol] method_names) -> void

        class AllBlockParametersMustBeKeywordParametersError < StandardError
          def message: -> String
        end

        class NoBlockProvided < StandardError
        end

        class DSLDoesNotExistError < StandardError
        end

        class DSLNamesShouldBeSymbolsError < StandardError
          def message: -> String
        end
      end
    end
  end
end
