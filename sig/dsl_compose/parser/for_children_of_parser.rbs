# Classes
module DSLCompose
  class Parser
    class ForChildrenOfParser
      @base_class: singleton(Object)
      @child_class: singleton(Object)

      def initialize: (singleton(Object) base_class, bool final_children_only) -> void

      # overriding this method because steep doesn't
      # correctly infer that a block is being passed to this method
      def instance_exec: (
        ::Hash[untyped, untyped] args
      ) -> void

      private
      def for_dsl: (Array[Symbol] dsl_names, ?on_current_class: bool, ?on_ancestor_class: bool) -> untyped

      class AllBlockParametersMustBeKeywordParametersError < StandardError
        end

      class ClassDoesNotUseDSLComposeError < StandardError
      end

      class NoBlockProvided < StandardError
      end

      class NoChildClassError < StandardError
        end
    end
  end
end
