type argument_type = :integer | :string | :boolean | :float | :array | :symbol | :class | :object
# Classes
module DSLCompose
  class DSL
    class Arguments
      class Argument
        RESERVED_ARGUMENT_NAMES: Array[Symbol]

        attr_reader name: Symbol
        attr_reader type: argument_type
        attr_reader required: bool
        attr_reader kwarg: bool
        attr_reader array: bool
        attr_reader default: untyped
        attr_reader description: String

        attr_reader greater_than_validation: GreaterThanValidation
        attr_reader greater_than_or_equal_to_validation: GreaterThanOrEqualToValidation
        attr_reader less_than_validation: LessThanValidation
        attr_reader less_than_or_equal_to_validation: LessThanOrEqualToValidation
        attr_reader format_validation: FormatValidation
        attr_reader equal_to_validation: EqualToValidation
        attr_reader in_validation: InValidation
        attr_reader not_in_validation: NotInValidation
        attr_reader end_with_validation: EndWithValidation
        attr_reader not_end_with_validation: NotEndWithValidation
        attr_reader start_with_validation: StartWithValidation
        attr_reader not_start_with_validation: NotStartWithValidation
        attr_reader length_validation: LengthValidation
        attr_reader is_a_validation: IsAValidation

        def initialize: (Symbol name, bool required, bool kwarg, argument_type `type`, ?array: bool, ?default: untyped) -> void
        def set_description: (String description) -> void
        def has_description?: () -> bool
        def required?: -> bool
        def optional?: -> bool

        def validate_greater_than: (Numeric value) -> void
        def validate_greater_than_or_equal_to: (Numeric value) -> void
        def validate_less_than: (Numeric value) -> void
        def validate_less_than_or_equal_to: (Numeric value) -> void
        def validate_format: (Regexp regexp) -> void
        def validate_equal_to: (Numeric | Symbol | String value) -> void
        def validate_in: (Array[Numeric | Symbol | String] values) -> void
        def validate_not_in: (Array[Numeric | Symbol | String] values) -> void
        def validate_end_with: (Symbol | Array[Symbol] | String | Array[String] value) -> void
        def validate_not_end_with: (Symbol | Array[Symbol] | String | Array[String] value) -> void
        def validate_start_with: (Symbol | Array[Symbol] | String | Array[String] value) -> void
        def validate_not_start_with: (Symbol | Array[Symbol] | String | Array[String] value) -> void
        def validate_length: (?maximum: nil | Numeric, ?minimum: nil | Numeric, ?is: nil | Numeric) -> void
        def validate_is_a: (String class_name) -> void

        class ValidationInvalidArgumentError < StandardError
        end

        class ValidationIncompatibleError < StandardError
          def message: -> untyped
        end

        class ValidationAlreadyExistsError < StandardError
        end

        class InvalidTypeError < StandardError
        end

        class ArgumentNameReservedError < StandardError
        end

        class InvalidNameError < StandardError
        end

        class InvalidDescriptionError < StandardError
        end

        class DescriptionAlreadyExistsError < StandardError
        end
      end
    end
  end
end