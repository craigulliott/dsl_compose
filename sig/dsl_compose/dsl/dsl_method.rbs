# Classes
module DSLCompose
  class DSL
    class DSLMethod
      @arguments: Hash[Symbol, Argument]

      attr_reader name: Symbol
      attr_reader unique: bool
      attr_reader required: bool
      attr_reader description: String
      def initialize: (Symbol name, bool unique, bool required) -> void
      def set_description: (String description) -> void
      def has_description?: -> bool
      def arguments: -> Array[Argument]
      def optional_arguments: -> Array[Argument]
      def required_arguments: -> Array[Argument]
      def argument: (Symbol name) -> Argument
      def has_argument?: (Symbol name) -> bool
      def unique?: -> bool
      def required?: -> bool
      def optional?: -> bool
      def add_argument: (Symbol name, bool required, argument_type `type`) -> Argument

      class InvalidNameError < StandardError
        def message: -> String
      end

      class InvalidDescriptionError < StandardError
        def message: -> String
      end

      class DescriptionAlreadyExistsError < StandardError
        def message: -> String
      end

      class ArgumentOrderingError < StandardError
        def message: -> String
      end

      class ArgumentAlreadyExistsError < StandardError
        def message: -> String
      end
    end
  end
end
