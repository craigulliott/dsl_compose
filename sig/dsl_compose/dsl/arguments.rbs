# Classes
module DSLCompose
  class DSL
    class Arguments
      @arguments: Hash[Symbol, Argument]

      def initialize: -> void
      def arguments: -> Array[Argument]
      def optional_arguments: -> Array[Argument]
      def required_arguments: -> Array[Argument]
      def argument: (Symbol name) -> Argument
      def optional_argument: (Symbol name) -> Argument
      def required_argument: (Symbol name) -> Argument
      def has_argument?: (Symbol name) -> bool
      def add_argument: (Symbol name, bool required, argument_type `type`) -> Argument

      class ArgumentDoesNotExistError < StandardError
        def message: -> String
      end

      class ArgumentOrderingError < StandardError
        def message: -> String
      end

      class ArgumentAlreadyExistsError < StandardError
        def message: -> String
      end

      class RequestedOptionalArgumentIsRequiredError < StandardError
        def message: -> String
      end

      class RequestedRequiredArgumentIsOptionalError < StandardError
        def message: -> String
      end
    end
  end
end
